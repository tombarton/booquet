# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BasketInput {
  items: [String!]!
}

input ChangePasswordInput {
  oldPassword: String!
  newPassword: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  id: String!
  title: String!
  totalCapacity: Float!
  remainingCapacity: Float!
}

input EventCapacityInput {
  id: String!
}

input ForgotPasswordInput {
  email: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  signup(data: SignupInput!): User!
  login(data: LoginInput!): User!
  logout: Boolean!
  forgotPassword(data: ForgotPasswordInput!): Boolean!
  resetPassword(data: ResetPasswordInput!): User!
  updateuser(data: UpdateUserInput!): User!
  changePassword(data: ChangePasswordInput!): User!
}

type Order {
  id: ID!
  items: [OrderItem!]!
  total: Float!
  status: OrderStatus!
  chargeId: String
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User
}

type OrderConnection {
  edges: [OrderEdge!]
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderEdge {
  cursor: String!
  node: Order!
}

type OrderItem {
  id: ID!
  title: String!
  image: String!
  price: Float!
  quantity: Float!
}

input OrderSort {
  direction: SortDirection!
  field: OrderSortField!
}

enum OrderSortField {
  id
  createdAt
  updatedAt
}

"""Order Status"""
enum OrderStatus {
  AWAITING_CONFIRMATION
  AWAITING_FULFILLMENT
  FULFILLED
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
  totalPages: String!
}

type PaymentIntent {
  """Payment Intent Token"""
  token: String!
}

type Product {
  id: ID!
  name: String!
  price: Float!
}

type Query {
  getIntent(data: BasketInput): PaymentIntent!
  getAllProducts: [Product!]!
  getEventCapacity(data: EventCapacityInput!): Event!
  me: User!
  getAllUsers: [User!]!
  getAllOrders(sortBy: OrderSort, limit: Int, skip: Int): OrderConnection!
}

input ResetPasswordInput {
  resetTokenHash: String!
  newPassword: String!
  autoLogin: Boolean
}

"""User role"""
enum Role {
  ADMIN
  USER
}

input SignupInput {
  email: String!
  password: String!
  firstname: String!
  lastname: String!
}

enum SortDirection {
  asc
  desc
}

type Subscription {
  UPDATE_USER: User!
}

input UpdateUserInput {
  firstname: String
  lastname: String
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  firstname: String
  lastname: String
  role: Role!
  password: String!
}
